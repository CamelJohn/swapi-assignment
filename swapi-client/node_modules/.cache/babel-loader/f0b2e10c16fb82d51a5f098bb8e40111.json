{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport instance from \"../axios\";\n/**\r\n * @description This is a very clunky attempt at code reusabilitiy.\r\n * I got stressed, and confused - so i just left it like this.\r\n * If i would not be flustered I would have imported the other hooks, and fixed the error that happens when you return them\r\n * inside ot the switch case, I'm not frontend expret but it seems to me that the order of the array being sent back by the hook\r\n * matters as a whole to the hook.\r\n * \r\n * the 'instance' uses axios under the hood and calls a nodejs server that i spun up to handle the formatting of requests to SWAPI\r\n * (found it to be much easyer for me).\r\n */\n\nconst useGetData = module => {\n  _s();\n\n  const [planets, setPlanets] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [text, setText] = useState('');\n  const [tableData, setTableData] = useState([]);\n  const [fetching, setFetching] = useState(false);\n  let timer;\n  const cachedData = localStorage.getItem(`cached-${module}`);\n\n  const log = () => console.log('If your looking for it in the network tab, your request has been cached to local storage...');\n\n  let getData;\n\n  switch (module) {\n    case 'chart-data':\n      getData = async () => {\n        const {\n          data\n        } = await instance.get(module);\n        timer = setTimeout(() => {\n          setPlanets(data.planets);\n          setTotal(data.total);\n        }, 1500);\n      };\n\n      return [timer, getData, planets, total];\n\n    case 'scroll-text':\n      getData = async () => {\n        const {\n          data\n        } = await instance.get(module);\n        setText(data);\n        localStorage.setItem('cached-credits', JSON.stringify(data));\n        log();\n        timer = setTimeout(() => setText(data), 1500);\n      };\n\n      return [timer, cachedData, getData, text, setText];\n\n    case 'table-data':\n      getData = async () => {\n        setFetching(true);\n        const {\n          data\n        } = await instance.get(module);\n        localStorage.setItem(`cached-${module}`, JSON.stringify(data));\n        log();\n        timer = setTimeout(() => {\n          setTableData(data);\n          setFetching(false);\n        }, 1000);\n      };\n\n      return [timer, cachedData, getData, fetching, tableData, setTableData];\n  }\n};\n\n_s(useGetData, \"0eCcqkQD7LALkc6IlIHwQhDiKdU=\");\n\nexport default useGetData;","map":{"version":3,"sources":["C:/Users/User/Desktop/tikal-assignment/swapi-client/src/hooks/useGetData.js"],"names":["useState","instance","useGetData","module","planets","setPlanets","total","setTotal","text","setText","tableData","setTableData","fetching","setFetching","timer","cachedData","localStorage","getItem","log","console","getData","data","get","setTimeout","setItem","JSON","stringify"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAGC,MAAM,IAAI;AAAA;;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AAEA,MAAIc,KAAJ;AACA,QAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAsB,UAASd,MAAO,EAAtC,CAAnB;;AACA,QAAMe,GAAG,GAAG,MAAMC,OAAO,CAACD,GAAR,CAAY,6FAAZ,CAAlB;;AACA,MAAIE,OAAJ;;AAEA,UAAQjB,MAAR;AACE,SAAK,YAAL;AAAmBiB,MAAAA,OAAO,GAAG,YAAY;AACvC,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMpB,QAAQ,CAACqB,GAAT,CAAanB,MAAb,CAAvB;AAEAW,QAAAA,KAAK,GAAGS,UAAU,CAAC,MAAM;AACvBlB,UAAAA,UAAU,CAACgB,IAAI,CAACjB,OAAN,CAAV;AACAG,UAAAA,QAAQ,CAACc,IAAI,CAACf,KAAN,CAAR;AACD,SAHiB,EAGf,IAHe,CAAlB;AAID,OAPkB;;AAQnB,aAAO,CAACQ,KAAD,EAAQM,OAAR,EAAiBhB,OAAjB,EAA0BE,KAA1B,CAAP;;AACA,SAAK,aAAL;AAAoBc,MAAAA,OAAO,GAAG,YAAY;AACxC,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMpB,QAAQ,CAACqB,GAAT,CAAanB,MAAb,CAAvB;AACAM,QAAAA,OAAO,CAACY,IAAD,CAAP;AAEAL,QAAAA,YAAY,CAACQ,OAAb,CAAqB,gBAArB,EAAuCC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAvC;AACAH,QAAAA,GAAG;AAEHJ,QAAAA,KAAK,GAAGS,UAAU,CAAC,MAAMd,OAAO,CAACY,IAAD,CAAd,EAAsB,IAAtB,CAAlB;AACD,OARmB;;AASpB,aAAO,CAACP,KAAD,EAAQC,UAAR,EAAoBK,OAApB,EAA6BZ,IAA7B,EAAmCC,OAAnC,CAAP;;AACA,SAAK,YAAL;AAAmBW,MAAAA,OAAO,GAAG,YAAY;AACzCP,QAAAA,WAAW,CAAC,IAAD,CAAX;AAEA,cAAM;AAAEQ,UAAAA;AAAF,YAAW,MAAMpB,QAAQ,CAACqB,GAAT,CAAanB,MAAb,CAAvB;AAEAa,QAAAA,YAAY,CAACQ,OAAb,CAAsB,UAASrB,MAAO,EAAtC,EAAyCsB,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAzC;AACAH,QAAAA,GAAG;AAEHJ,QAAAA,KAAK,GAAGS,UAAU,CAAC,MAAM;AACvBZ,UAAAA,YAAY,CAACU,IAAD,CAAZ;AACAR,UAAAA,WAAW,CAAC,KAAD,CAAX;AACD,SAHiB,EAGf,IAHe,CAAlB;AAID,OAZoB;;AAarB,aAAO,CAACC,KAAD,EAAQC,UAAR,EAAoBK,OAApB,EAA6BR,QAA7B,EAAuCF,SAAvC,EAAkDC,YAAlD,CAAP;AAjCA;AAmCD,CA/CD;;GAAMT,U;;AAiDN,eAAeA,UAAf","sourcesContent":["import { useState } from \"react\";\r\nimport instance from \"../axios\";\r\n\r\n/**\r\n * @description This is a very clunky attempt at code reusabilitiy.\r\n * I got stressed, and confused - so i just left it like this.\r\n * If i would not be flustered I would have imported the other hooks, and fixed the error that happens when you return them\r\n * inside ot the switch case, I'm not frontend expret but it seems to me that the order of the array being sent back by the hook\r\n * matters as a whole to the hook.\r\n * \r\n * the 'instance' uses axios under the hood and calls a nodejs server that i spun up to handle the formatting of requests to SWAPI\r\n * (found it to be much easyer for me).\r\n */\r\n\r\nconst useGetData = module => {\r\n  const [planets, setPlanets] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [text, setText] = useState('');\r\n  const [tableData, setTableData] = useState([]);\r\n  const [fetching, setFetching] = useState(false);\r\n\r\n  let timer;\r\n  const cachedData = localStorage.getItem(`cached-${module}`);\r\n  const log = () => console.log('If your looking for it in the network tab, your request has been cached to local storage...');\r\n  let getData;\r\n\r\n  switch (module) {\r\n    case 'chart-data': getData = async () => {\r\n      const { data } = await instance.get(module);\r\n  \r\n      timer = setTimeout(() => {\r\n        setPlanets(data.planets);\r\n        setTotal(data.total);\r\n      }, 1500);\r\n    }\r\n    return [timer, getData, planets, total]\r\n    case 'scroll-text': getData = async () => {\r\n      const { data } = await instance.get(module);\r\n      setText(data);\r\n  \r\n      localStorage.setItem('cached-credits', JSON.stringify(data))\r\n      log();\r\n    \r\n      timer = setTimeout(() => setText(data), 1500);\r\n    }\r\n    return [timer, cachedData, getData, text, setText]\r\n    case 'table-data': getData = async () => {\r\n    setFetching(true);\r\n  \r\n    const { data } = await instance.get(module);\r\n  \r\n    localStorage.setItem(`cached-${module}`, JSON.stringify(data))\r\n    log();\r\n  \r\n    timer = setTimeout(() => {\r\n      setTableData(data);\r\n      setFetching(false);\r\n    }, 1000);\r\n  };\r\n  return [timer, cachedData, getData, fetching, tableData, setTableData];\r\n  }\r\n}\r\n\r\nexport default useGetData;"]},"metadata":{},"sourceType":"module"}