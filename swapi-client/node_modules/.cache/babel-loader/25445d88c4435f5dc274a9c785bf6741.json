{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\tikal-assignment\\\\swapi-client\\\\src\\\\components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport useGetData from '../../hooks/useGetData';\nimport Loading from '../Loading/Loading';\nimport css from './Table.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Table = () => {\n  _s();\n\n  const [timer, cachedData, getData, fetching, tableData, setTableData] = useGetData('table-data');\n  useEffect(() => {\n    if (!cachedData) {\n      (async () => await getData())();\n    } else {\n      setTableData(JSON.parse(cachedData));\n    }\n\n    return () => clearTimeout(timer);\n  }, []);\n  const renderTableData = tableData.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: css.row,\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: row.vehicle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      className: css.innerCellRow,\n      children: row.pilots.map((pilot, indx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.innerCell,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: pilot.homeworldName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this), ' ', /*#__PURE__*/_jsxDEV(\"div\", {\n          children: pilot.homeworldPopulation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this)]\n      }, indx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.innerCellRow,\n        children: row.pilots.map((pilot, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: pilot.pilotName\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: row.totalPopulation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this));\n\n  if (!fetching) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.Table,\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Vehicle Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Planets & Total population\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Pilot Names\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Total Population\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: renderTableData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(Table, \"EKfOGxUm1VMivXsjVOMiuUftNJQ=\", false, function () {\n  return [useGetData];\n});\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["C:/Users/User/Desktop/tikal-assignment/swapi-client/src/components/Table/Table.js"],"names":["useEffect","useGetData","Loading","css","Table","timer","cachedData","getData","fetching","tableData","setTableData","JSON","parse","clearTimeout","renderTableData","map","row","index","vehicle","innerCellRow","pilots","pilot","indx","innerCell","homeworldName","homeworldPopulation","idx","pilotName","totalPopulation"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,UAAR,EAAoBC,OAApB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,YAAlD,IAAkET,UAAU,CAAC,YAAD,CAAlF;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACM,UAAL,EAAiB;AACf,OAAC,YAAY,MAAMC,OAAO,EAA1B;AACD,KAFD,MAEO;AACLG,MAAAA,YAAY,CAACC,IAAI,CAACC,KAAL,CAAWN,UAAX,CAAD,CAAZ;AACD;;AAED,WAAO,MAAMO,YAAY,CAACR,KAAD,CAAzB;AACD,GARQ,EAQN,EARM,CAAT;AAUA,QAAMS,eAAe,GAAGL,SAAS,CAACM,GAAV,CAAc,CAACC,GAAD,EAAMC,KAAN,kBACpC;AAAgB,IAAA,SAAS,EAAEd,GAAG,CAACa,GAA/B;AAAA,4BACE;AAAA,gBAAKA,GAAG,CAACE;AAAT;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAI,MAAA,SAAS,EAAEf,GAAG,CAACgB,YAAnB;AAAA,gBACGH,GAAG,CAACI,MAAJ,CAAWL,GAAX,CAAe,CAACM,KAAD,EAAQC,IAAR,kBACd;AAAgB,QAAA,SAAS,EAAEnB,GAAG,CAACoB,SAA/B;AAAA,gCACE;AAAA,oBAAMF,KAAK,CAACG;AAAZ;AAAA;AAAA;AAAA;AAAA,gBADF,EACmC,GADnC,eAEE;AAAA,oBAAMH,KAAK,CAACI;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAUH,IAAV;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eAUE;AAAA,6BACE;AAAK,QAAA,SAAS,EAAEnB,GAAG,CAACgB,YAApB;AAAA,kBACGH,GAAG,CAACI,MAAJ,CAAWL,GAAX,CAAe,CAACM,KAAD,EAAQK,GAAR,kBACd;AAAA,oBAAgBL,KAAK,CAACM;AAAtB,WAAUD,GAAV;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAVF,eAiBE;AAAA,gBAAKV,GAAG,CAACY;AAAT;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA,KAASX,KAAT;AAAA;AAAA;AAAA;AAAA,UADsB,CAAxB;;AAsBA,MAAI,CAACT,QAAL,EAAe;AACb,wBACE;AAAK,MAAA,SAAS,EAAEL,GAAG,CAACC,KAApB;AAAA,6BAEI;AAAA,gCACE;AAAA,iCACE;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AAAA,oBACEU;AADF;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD,GApBD,MAoBO;AACL,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACF,CA1DD;;GAAMV,K;UACoEH,U;;;KADpEG,K;AA4DN,eAAeA,KAAf","sourcesContent":["import { useEffect } from 'react';\nimport useGetData from '../../hooks/useGetData';\nimport Loading from '../Loading/Loading';\nimport css from './Table.module.css';\n\nconst Table = () => {\n  const [timer, cachedData, getData, fetching, tableData, setTableData] = useGetData('table-data');\n\n  useEffect(() => {\n    if (!cachedData) {\n      (async () => await getData())();\n    } else {\n      setTableData(JSON.parse(cachedData));\n    }\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const renderTableData = tableData.map((row, index) => (\n    <tr key={index} className={css.row}>\n      <td>{row.vehicle}</td>\n      <td className={css.innerCellRow}>\n        {row.pilots.map((pilot, indx) => (\n          <div key={indx} className={css.innerCell}>\n            <div>{pilot.homeworldName}</div>{' '}\n            <div>{pilot.homeworldPopulation}</div>\n          </div>\n        ))}\n      </td>\n      <td>\n        <div className={css.innerCellRow}>\n          {row.pilots.map((pilot, idx) => (\n            <div key={idx}>{pilot.pilotName}</div>\n          ))}\n        </div>\n      </td>\n      <td>{row.totalPopulation}</td>\n    </tr>\n  ));\n\n  if (!fetching) {\n    return (\n      <div className={css.Table}>\n        {\n          <table>\n            <thead>\n              <tr>\n                <th>Vehicle Name</th>\n                <th>Planets & Total population</th>\n                <th>Pilot Names</th>\n                <th>Total Population</th>\n              </tr>\n            </thead>\n            <tbody>\n             {renderTableData}\n            </tbody>\n          </table>\n        }\n      </div>\n    );\n  } else {\n    return <Loading />;\n  }\n};\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}